//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/PlayerControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControl : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControl"",
    ""maps"": [
        {
            ""name"": ""Player3"",
            ""id"": ""83543070-6a80-4988-9538-bca72e34d71d"",
            ""actions"": [
                {
                    ""name"": ""MovementP1"",
                    ""type"": ""Value"",
                    ""id"": ""cc1ca529-ff40-4000-bc26-db84c209df05"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MovementP2"",
                    ""type"": ""Value"",
                    ""id"": ""6fdde0e9-1114-4abb-b47b-ac12c87e5361"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotateP1"",
                    ""type"": ""Value"",
                    ""id"": ""50852625-f2c8-453c-8ab1-034415eb16e8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotateP2"",
                    ""type"": ""Value"",
                    ""id"": ""b6ee244a-50c1-4aee-bc82-a8a4adfa2a1d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""JumpP1"",
                    ""type"": ""Button"",
                    ""id"": ""203d3157-37b8-4858-8a85-a1be88ff614b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JumpP2"",
                    ""type"": ""Button"",
                    ""id"": ""36e706d8-ecb4-4361-a551-9a57d1daac5a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0eb2d7c7-cdde-44ba-b7cd-05d13e63d4f5"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementP1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e813dfb-6e2b-45d4-8e60-2ed0879b5576"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateP1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""57140518-8c11-4e3f-9696-5e6ab442daf2"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementP2"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ecdd0767-4cb9-4d62-bf8c-3e1f0463e980"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementP2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2ac272bc-9736-4a9d-b13b-459a28637f73"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementP2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d05e555c-841e-4198-96a1-e10e8d36b8fd"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementP2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""453ceee5-13cc-4684-9cd8-43f9e8f963db"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementP2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""107f3e1b-1588-4d8b-aa08-7cd8c3e3459e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateP2"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4381347e-807b-4827-815e-bd6abbce4787"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateP2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""411992b2-1609-41c2-b041-d4d9cc0eb41b"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateP2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""952ba0d5-509c-4dae-b1fa-53e2eed18bef"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateP2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c94f31d2-7dc2-4109-8bd6-afca3e5ad463"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateP2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""98a0ca02-6256-445a-8399-15e0575f6d62"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JumpP1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a7df5e31-3008-4da3-97df-74759e26056d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JumpP2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player3
        m_Player3 = asset.FindActionMap("Player3", throwIfNotFound: true);
        m_Player3_MovementP1 = m_Player3.FindAction("MovementP1", throwIfNotFound: true);
        m_Player3_MovementP2 = m_Player3.FindAction("MovementP2", throwIfNotFound: true);
        m_Player3_RotateP1 = m_Player3.FindAction("RotateP1", throwIfNotFound: true);
        m_Player3_RotateP2 = m_Player3.FindAction("RotateP2", throwIfNotFound: true);
        m_Player3_JumpP1 = m_Player3.FindAction("JumpP1", throwIfNotFound: true);
        m_Player3_JumpP2 = m_Player3.FindAction("JumpP2", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player3
    private readonly InputActionMap m_Player3;
    private IPlayer3Actions m_Player3ActionsCallbackInterface;
    private readonly InputAction m_Player3_MovementP1;
    private readonly InputAction m_Player3_MovementP2;
    private readonly InputAction m_Player3_RotateP1;
    private readonly InputAction m_Player3_RotateP2;
    private readonly InputAction m_Player3_JumpP1;
    private readonly InputAction m_Player3_JumpP2;
    public struct Player3Actions
    {
        private @PlayerControl m_Wrapper;
        public Player3Actions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @MovementP1 => m_Wrapper.m_Player3_MovementP1;
        public InputAction @MovementP2 => m_Wrapper.m_Player3_MovementP2;
        public InputAction @RotateP1 => m_Wrapper.m_Player3_RotateP1;
        public InputAction @RotateP2 => m_Wrapper.m_Player3_RotateP2;
        public InputAction @JumpP1 => m_Wrapper.m_Player3_JumpP1;
        public InputAction @JumpP2 => m_Wrapper.m_Player3_JumpP2;
        public InputActionMap Get() { return m_Wrapper.m_Player3; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player3Actions set) { return set.Get(); }
        public void SetCallbacks(IPlayer3Actions instance)
        {
            if (m_Wrapper.m_Player3ActionsCallbackInterface != null)
            {
                @MovementP1.started -= m_Wrapper.m_Player3ActionsCallbackInterface.OnMovementP1;
                @MovementP1.performed -= m_Wrapper.m_Player3ActionsCallbackInterface.OnMovementP1;
                @MovementP1.canceled -= m_Wrapper.m_Player3ActionsCallbackInterface.OnMovementP1;
                @MovementP2.started -= m_Wrapper.m_Player3ActionsCallbackInterface.OnMovementP2;
                @MovementP2.performed -= m_Wrapper.m_Player3ActionsCallbackInterface.OnMovementP2;
                @MovementP2.canceled -= m_Wrapper.m_Player3ActionsCallbackInterface.OnMovementP2;
                @RotateP1.started -= m_Wrapper.m_Player3ActionsCallbackInterface.OnRotateP1;
                @RotateP1.performed -= m_Wrapper.m_Player3ActionsCallbackInterface.OnRotateP1;
                @RotateP1.canceled -= m_Wrapper.m_Player3ActionsCallbackInterface.OnRotateP1;
                @RotateP2.started -= m_Wrapper.m_Player3ActionsCallbackInterface.OnRotateP2;
                @RotateP2.performed -= m_Wrapper.m_Player3ActionsCallbackInterface.OnRotateP2;
                @RotateP2.canceled -= m_Wrapper.m_Player3ActionsCallbackInterface.OnRotateP2;
                @JumpP1.started -= m_Wrapper.m_Player3ActionsCallbackInterface.OnJumpP1;
                @JumpP1.performed -= m_Wrapper.m_Player3ActionsCallbackInterface.OnJumpP1;
                @JumpP1.canceled -= m_Wrapper.m_Player3ActionsCallbackInterface.OnJumpP1;
                @JumpP2.started -= m_Wrapper.m_Player3ActionsCallbackInterface.OnJumpP2;
                @JumpP2.performed -= m_Wrapper.m_Player3ActionsCallbackInterface.OnJumpP2;
                @JumpP2.canceled -= m_Wrapper.m_Player3ActionsCallbackInterface.OnJumpP2;
            }
            m_Wrapper.m_Player3ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MovementP1.started += instance.OnMovementP1;
                @MovementP1.performed += instance.OnMovementP1;
                @MovementP1.canceled += instance.OnMovementP1;
                @MovementP2.started += instance.OnMovementP2;
                @MovementP2.performed += instance.OnMovementP2;
                @MovementP2.canceled += instance.OnMovementP2;
                @RotateP1.started += instance.OnRotateP1;
                @RotateP1.performed += instance.OnRotateP1;
                @RotateP1.canceled += instance.OnRotateP1;
                @RotateP2.started += instance.OnRotateP2;
                @RotateP2.performed += instance.OnRotateP2;
                @RotateP2.canceled += instance.OnRotateP2;
                @JumpP1.started += instance.OnJumpP1;
                @JumpP1.performed += instance.OnJumpP1;
                @JumpP1.canceled += instance.OnJumpP1;
                @JumpP2.started += instance.OnJumpP2;
                @JumpP2.performed += instance.OnJumpP2;
                @JumpP2.canceled += instance.OnJumpP2;
            }
        }
    }
    public Player3Actions @Player3 => new Player3Actions(this);
    public interface IPlayer3Actions
    {
        void OnMovementP1(InputAction.CallbackContext context);
        void OnMovementP2(InputAction.CallbackContext context);
        void OnRotateP1(InputAction.CallbackContext context);
        void OnRotateP2(InputAction.CallbackContext context);
        void OnJumpP1(InputAction.CallbackContext context);
        void OnJumpP2(InputAction.CallbackContext context);
    }
}
